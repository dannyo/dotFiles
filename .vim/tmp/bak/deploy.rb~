# config valid only for Capistrano 3.1
lock '3.4.0'

set :application, 'shophers'
set :repo_url,    'git@github.com:Shop-Hers/shophers.git'

# Default branch is :master
ask :branch, proc { `git rev-parse --abbrev-ref HEAD`.chomp }.call

# Default deploy_to directory is /var/www/my_app
set :deploy_to, "/var/www/apps/#{fetch(:application)}"

# Default value for :scm is :git
set :scm, :git

# Default value for :format is :pretty
set :format, :pretty

# Default value for :log_level is :debug
set :log_level, :debug

# Default value for :pty is false
# set :pty, true

# Default value for :linked_files is []
set :linked_files, %w{
  config/database.yml
  config/secrets.yml
  config/s3.yml
  config/newrelic.yml
  config/application.yml
}

# Default value for linked_dirs is []
set :linked_dirs, %w{
  log
  tmp/pids
  tmp/cache
  tmp/sockets
  tmp/ach_batches
  vendor/bundle
  public/system
}

# Default value for default_env is {}
# set :default_env, { path: "/opt/ruby/bin:$PATH" }

# Default value for keep_releases is 5
set :keep_releases, 5

set :ssh_options, {
  user: 'code-deploy',
  # keys: Array(ENV['DEPLOY_KEY']),
  keys: %w(~/Downloads/sh-prod-web.pem),
  forward_agent: false,
  auth_methods: %w(publickey)
}

set :bundle_roles,    [:app, :cron]
set :bundle_jobs,     4
set :bundle_binstubs, nil

set :whenever_command, 'bin/whenever'
set :whenever_roles,   :cron

# nginx and unicorn templates
set :nginx_ssl_certificate,     'star_shop-hers_com.pem'
set :nginx_ssl_certificate_key, 'star_shop-hers_com.key'

# capistrano3-unicorn gem
set :unicorn_command,     'bin/unicorn'
set :unicorn_pid,         -> { shared_path.join('tmp/pids/unicorn.pid') }
set :unicorn_config_path, -> { shared_path.join('config/unicorn.rb') }
set :unicorn_roles,       :app
set :unicorn_rack_env,    'none'

set :slack_via_slackbot, true
set :slack_team,    "shophers"
set :slack_token,   "SAYDXVASUF7YKfZGiop0owL6"
set :slack_channel, "#deploys"
set :slack_msg_starting, -> {
  "#{ENV['GIT_AUTHOR_NAME'] || `git config user.name`.chomp} has started deploying branch #{fetch :branch} of #{fetch :application} to #{fetch :stage, 'an unknown stage'}"
}
set :slack_msg_finished, -> {
  "#{ENV['GIT_AUTHOR_NAME'] || `git config user.name`.chomp} has finished deploying branch #{fetch :branch} of #{fetch :application} to #{fetch :stage, 'an unknown stage'}"
}
set :slack_msg_failed, -> {
  "#{ENV['GIT_AUTHOR_NAME'] || `git config user.name`.chomp} failed to deploy branch #{fetch :branch} of #{fetch :application} to #{fetch :stage, 'an unknown stage'}"
}

set :sidekiq_role, :cron

namespace :deploy do
  desc 'Restart application'
  task :restart do
    on roles(:app), in: :sequence, wait: 10 do
      invoke 'unicorn:restart'
      invoke 'application:curl'
    end
  end

  after :publishing, :restart

  after :restart, :finalize do
    invoke 'application:truncate_log'
    invoke 'application:newrelic_off'
    invoke 'airbrake:deploy'
  end

  after :starting, "slack:deploy:starting"
  after :finished, "slack:deploy:finished"
  after :failed,   "slack:deploy:failed"
end
